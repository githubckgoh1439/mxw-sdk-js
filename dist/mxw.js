'use strict';
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const constants = __importStar(require("./constants"));
exports.constants = constants;
const errors = __importStar(require("./errors"));
exports.errors = errors;
const abstract_signer_1 = require("./abstract-signer");
exports.Signer = abstract_signer_1.Signer;
const wallet_1 = require("./wallet");
exports.Wallet = wallet_1.Wallet;
const auth = __importStar(require("./kyc"));
exports.auth = auth;
const kyc_1 = require("./kyc");
exports.Kyc = kyc_1.Kyc;
const token = __importStar(require("./token"));
exports.token = token;
const nonFungibleToken = __importStar(require("./non-fungible-token"));
exports.nonFungibleToken = nonFungibleToken;
const nonFungibleTokenItem = __importStar(require("./non-fungible-token-item"));
exports.nonFungibleTokenItem = nonFungibleTokenItem;
const nameService = __importStar(require("./name-service"));
exports.nameService = nameService;
const utils = __importStar(require("./utils"));
exports.utils = utils;
const providers = __importStar(require("./providers"));
exports.providers = providers;
const wordlists = __importStar(require("./wordlists"));
exports.wordlists = wordlists;
const MultiSig = __importStar(require("./multisig"));
exports.MultiSig = MultiSig;
////////////////////////
// Compile-Time Constants
// This is generated by "npm run dist"
let { version } = require("../package.json");
exports.version = version;
////////////////////////
// Helper Functions
function getDefaultProvider(network) {
    if (network == null) {
        network = 'homestead';
    }
    let n = utils.getNetwork(network);
    if (!n || !n._defaultProvider) {
        errors.throwError('unsupported getDefaultProvider network', errors.UNSUPPORTED_OPERATION, {
            operation: 'getDefaultProvider',
            network: network
        });
    }
    return n._defaultProvider(providers);
}
exports.getDefaultProvider = getDefaultProvider;
//# sourceMappingURL=mxw.js.map